package com.talentsboard.backend.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;

/**
 * Utilitaire pour échanger un customToken Firebase contre un idToken
 * via l'API Identity Toolkit. Requis si on veut que le backend
 * retourne directement un idToken utilisable.
 *
 * ⚠️ Nécessite une clé API Web (FIREBASE_WEB_API_KEY) dans les properties.
 *     Attention : protéger cette clé (ne pas la committer).
 */
public final class FirebaseTokenExchange {

    private static final RestTemplate REST = new RestTemplate();
    private static final ObjectMapper MAPPER = new ObjectMapper();

    /**
     * Exchange a custom token for an idToken.
     * @param customToken custom token generated by Firebase Admin SDK
     * @param apiKey Firebase Web API key (from project settings)
     * @return idToken (JWT) string
     */
    public static String exchangeCustomToken(String customToken, String apiKey) {
        try {
            String url = "https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key=" + apiKey;
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            Map<String, Object> body = new HashMap<>();
            body.put("token", customToken);
            body.put("returnSecureToken", true);

            HttpEntity<String> request = new HttpEntity<>(MAPPER.writeValueAsString(body), headers);
            ResponseEntity<Map> resp = REST.postForEntity(url, request, Map.class);
            if (resp.getStatusCode().is2xxSuccessful() && resp.getBody() != null) {
                return (String) resp.getBody().get("idToken");
            } else {
                throw new RuntimeException("Echange token Firebase échoué : " + resp);
            }
        } catch (Exception e) {
            throw new RuntimeException("Erreur échange customToken: " + e.getMessage(), e);
        }
    }
}
